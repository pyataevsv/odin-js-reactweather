{"version":3,"sources":["index.js"],"names":["WeatherApp","props","onInputChane","e","newCitystate","city","target","value","setState","getWeatherData","load","fetch","state","then","resp","console","log","ok","json","Error","status","lat","lon","refreshWeather","catch","err","finally","weatherBuf","JSON","parse","window","localStorage","getItem","weather","this","data","newWeater","iconSrc","current","icon","hourIconSrc","hourly","map","item","num","tdMas","thMas","i","elementTd","key","src","alt","className","Math","round","temp","push","elementTh","Date","now","getHours","dailyMas","daily","number","day","getDay","htmlFor","type","id","onChange","onClick","description","feels_like","wind_speed","pressure","clouds","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0e45d30.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nclass WeatherApp extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: 'Moscow',\n      load: 'hide'\n    }\n\n    let weatherBuf = JSON.parse(window.localStorage.getItem('weatherbuf'));\n    this.state.weather = weatherBuf.weather;\n\n    console.log(this.state.weather);\n\n  }\n\n  componentDidMount() {\n    this.getWeatherData();\n\n  }\n\n  onInputChane = (e) => {\n    const newCitystate = { city: e.target.value };\n    this.setState(newCitystate);\n  }\n\n  getWeatherData = () => {\n\n    this.setState({ load: 'load' });\n\n    fetch('https://us1.locationiq.com/v1/search.php?key=302f0d75c67b72&q=' + this.state.city + '&format=json')\n      .then(resp => {\n        console.log(resp);\n        if (resp.ok) {\n          return resp.json();\n        } else {\n          throw new Error(resp.status);\n        }\n      })\n      .then(resp => {\n        console.log(resp);\n        return fetch('https://api.openweathermap.org/data/2.5/onecall?lat=' + resp[0].lat + '&lon=' + resp[0].lon + '&appid=a19641b44afdf6e04adb1c8f74e13496&units=metric')\n      })\n      .then(resp => {\n        console.log(resp);\n        if (resp.ok) {\n          return resp.json();\n        } else {\n          throw new Error(resp.status);\n        }\n      })\n      .then(resp => {\n        console.log(resp);\n        this.refreshWeather(resp);\n      })\n      .catch(err => console.log(err))\n      .finally(() => {\n        console.log('asdfasdf')\n        this.setState({ load: 'hide' });\n      });\n  }\n\n  refreshWeather(data) {\n    let newWeater = { weather: data };\n    this.setState(newWeater);\n    console.log(this.state);\n  }\n\n\n  render() {\n\n    let iconSrc = 'http://openweathermap.org/img/wn/' + this.state.weather.current.weather[0].icon + '@2x.png';\n\n    let hourIconSrc = this.state.weather.hourly.map((item, num) => {\n      return 'http://openweathermap.org/img/wn/' + item.weather[0].icon + '.png';\n    })\n\n    let tdMas = [], thMas = [];\n\n    for (let i = 0; i < 7; i++) {\n      let elementTd =\n        <td key={i}>\n          <div><img src={hourIconSrc[i + 1]} alt='icon'></img></div>\n          <div className='hourly-tmp'>{Math.round(this.state.weather.hourly[i + 1].temp)}&#8451;</div>\n        </td>\n      tdMas.push(elementTd);\n\n      let elementTh = <th key={i}>{(new Date(Date.now() + 3600000 * (i + 1))).getHours()}:00</th>\n\n      thMas.push(elementTh);\n    }\n\n    let dailyMas = this.state.weather.daily.map((item, number) => {\n\n      let dayNum = ((new Date(Date.now())).getDay() + number) > 7 ? (new Date(Date.now())).getDay() + number - 7 : (new Date(Date.now())).getDay() + number;\n\n      let day;\n\n      switch (dayNum) {\n        case (1):\n          day = 'Mon';\n          break;\n        case (2):\n          day = 'Tue';\n          break;\n        case (3):\n          day = 'Wed';\n          break;\n        case (4):\n          day = 'Thu';\n          break;\n        case (5):\n          day = 'Fri';\n          break;\n        case (6):\n          day = 'Sat';\n          break;\n        case (7):\n          day = 'Sun';\n          break;\n        default:\n          break;\n      }\n\n      if (number !== 0) {\n        return <div className='daily-item' key={number}>\n          <div>\n            {day}\n          </div>\n          <div>\n            <img src={'http://openweathermap.org/img/wn/' + item.weather[0].icon + '.png'} alt='icon'></img>\n            <div>{Math.round(item.temp.day)}&#8451;</div>\n          </div>\n        </div>\n      } else {\n        return ''\n      }\n    })\n\n\n\n    return (\n      <div className='weather-app'>\n        <div className='current-box'>\n\n          <div>\n            <label htmlFor='input'></label>\n            <input type='text' id='input' value={this.state.city} onChange={this.onInputChane}></input>\n            <button onClick={this.getWeatherData}>go</button><span className={this.state.load}>Fetching data..</span>\n          </div>\n\n          <div className='current-main'>\n            <div>\n              <img src={iconSrc} alt='icon'></img> <br />\n              <div className='cur-wthdics'>{this.state.weather.current.weather[0].description}</div>\n            </div>\n            <div className='current-temp'>\n              {Math.round(this.state.weather.current.temp)}&#8451;\n              <div className='feels-like'>(feels like {Math.round(this.state.weather.current.feels_like)}&#8451;)</div>\n            </div>\n          </div>\n\n          <div className='current-sec'>\n\n            <div className='current-details'>\n              <div>Wind speen:</div>\n              <div> {this.state.weather.current.wind_speed} m/sec</div>\n              <div>Pressure: </div>\n              <div>{this.state.weather.current.pressure} hPa</div>\n              <div>Cloudiness: </div>\n              <div>{this.state.weather.current.clouds}%</div>\n              {/* <div>Pressure:{}</div> */}\n            </div>\n\n          </div>\n\n\n        </div>\n        <div className='hourly-box'>\n          <table>\n\n            <tbody>\n              <tr>\n                {thMas}\n              </tr>\n              <tr>\n                {tdMas}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <div className='daily-box'>\n          {dailyMas}\n        </div>\n\n      </div>\n    )\n  }\n\n}\n\nReactDOM.render(\n  <WeatherApp />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}